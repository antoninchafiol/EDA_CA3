@page "/drug"
@page "/"
@using CA3.Client.Pages

<MudPaper
Style="@($"color:{Theme.PaletteDark.Dark}; background-image:url('https://img.huffingtonpost.com/asset/5cd6453e2100005900c48002.jpeg?ops=scalefit_720_noupscale&format=webp'); background-size:cover; background-position:center; height:200px; display:flex; flex-direction:column; justify-content:center; align-items:center; text-align:center;")">
    <MudText Align="MudBlazor.Align.Center" Typo="Typo.h1"><b>OpenFDA Drug Search</b></MudText>
    <MudText Align="MudBlazor.Align.Center" Typo="Typo.h4">Usage: Enter the expected drug's name in the search bar or click the button to fetch an example</MudText>
    <MudText Align="MudBlazor.Align.Center" Typo="Typo.h4">Note: Some manufacturer doesn't put all showed information, those would be higlighted as "Not Stated"</MudText>
</MudPaper>
<div class="d-flex align-items-center" style="margin-top: 10px; align-items: stretch;">
    <MudTextField @bind-Value="textValue" Label="Expected drug name"Variant="Variant.Outlined" OnKeyDown="InvokeAsyncByKeyDown" Class="me-2"/>
    <MudNumericField @bind-Value="limitValue" Label="Limit the max number  of results by"  OnKeyDown="InvokeAsyncByKeyDown" Variant="Variant.Filled" Step="1" MaxLength="1000" Class="me-2"/>
    <MudButton OnClick="LoadDrugs" Disabled="@isLoading" Variant="Variant.Filled" Color="Color.Tertiary" Class="ms-2" Size="Size.Large">
        @if (isLoading)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Loading drugs</MudText>
        }
        else
        {
            <MudText>Search drugs</MudText>
        }
    </MudButton>
</div>



<br />

@if (drugs != null && drugs.Any())
{
    <MudTable Items="@drugs.AsQueryable()" Outlined="true" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<FullDrug,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Requested drugs</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="textSearchString" Placeholder="Filter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.BrandName))">Brand Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.GenericName))">Generic Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.ManufacturerName))">Manufacturer Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.ProductType))">Product Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.Route))">Route of Administration</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Openfda.ApplicationNumber))">Application Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FullDrug, object>(x => BlazorListStringHelper.Display(x.Purpose))">Purpose</MudTableSortLabel></MudTh>
            <MudTh>Details</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Brand Name" >
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.BrandName) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.BrandName)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Generic Name">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.GenericName) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.GenericName)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Manufacturer Name">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.ManufacturerName) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.ManufacturerName)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Product Type">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.ProductType) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.ProductType)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Route of Administration">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.Route) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.Route)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Application Number">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Openfda.ApplicationNumber) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Openfda.ApplicationNumber)
                </MudText>
            </MudTd>

            <MudTd DataLabel="Purpose">
                <MudText Inline="true" Typo="Typo.body2"
                Style="@(BlazorListStringHelper.Display(context.Purpose) == "Not Stated" ? "color: red; font-weight: bold;" : "")">
                    @BlazorListStringHelper.Display(context.Purpose)
                </MudText>
            </MudTd>


            <MudTd>
                <MudButton Variant="Variant.Text" EndIcon="@((context.IsExpanded) ? @Icons.Material.Filled.ExpandLess : @Icons.Material.Filled.ExpandMore)" OnClick="() => ToggleExpansion(context)">
                </MudButton>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.IsExpanded)
            {
                <MudTd ColSpan="3">
                    <MudGrid Class="pa-3" Gutter="3">
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Active Ingredients" MaxHeight="150" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Typo="Typo.body2">@BlazorListStringHelper.Display(context.ActiveIngredients)</MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Indications & Usage" MaxHeight="150" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Typo="Typo.body2">@BlazorListStringHelper.Display(context.IndicationAndUsage)</MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Warnings" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.Warnings)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Warnings and Precautions" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.WarningsAndPrecautions)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Adverse Reactions" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.AdverseReactions)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Dosage and Administration" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.DosageAndAdministration)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Drug Interactions" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.DrugInteractions)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Contraindications" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.Contraindications)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Storage and Handling" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.StorageAndHandling)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudExpansionPanel Text="Manufacturer Contact Info" Style="border: 1px solid #ccc; border-radius: 4px; padding: 8px;">
                                <MudText Inline="true" Typo="Typo.body2">
                                    @BlazorListStringHelper.Display(context.Openfda.ManufacturerName)
                                </MudText>
                            </MudExpansionPanel>
                        </MudItem>
                    </MudGrid>

                </MudTd>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}


@if (isWarningAlertVisible){
    <MudAlert ShowCloseIcon="true" CloseIconClicked="CloseAlert" Severity="Severity.Warning" Dense="true" Elevation="2" Class="my-2">@warningAlertText</MudAlert>
}


@code {

    // ---------------- START Variables ----------------
    // ================ API ============================
    [Inject]
    private DrugService drugService { get; set; } = default!;
    private List<FullDrug> drugs = new();
    private string? errorMessage = string.Empty;
    private bool isLoading = false;

    // ================ MUDBLAZOR ======================
    private MudTheme Theme = new MudTheme();
    private string? textValue = string.Empty;
    private string? textSearchString = string.Empty;
    private int? limitValue = 100;
    private bool isWarningAlertVisible = false;
    private string warningAlertText = string.Empty;
    // ---------------- END Variables ------------------


    // --------------- START Functions ----------------
    // =============== API ============================
    async Task LoadDrugs()
    {

        isLoading = true;
        errorMessage = null;
        textSearchString = "";
        StateHasChanged();

        if (limitValue <= 0 || limitValue == null)
        {
            limitValue = 1; // We want at least one to get something
            isWarningAlertVisible = true;
            warningAlertText = "Limit value inputed as less than 1, Changed to 1";
        }

        try
        {
            drugs = await drugService.GetDrugsAsync(textValue, limitValue);

        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading drugs: {ex.Message}";
            drugs = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    // =============== MUDBLAZOR ======================
    private bool FilterFunc1(FullDrug element) => FilterFunc(element, textSearchString);
    private bool FilterFunc(FullDrug element, string searchString)
    {  
        if (string.IsNullOrWhiteSpace(searchString))
            return true; 
        if (BlazorListStringHelper.Display(element.Openfda.BrandName).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (BlazorListStringHelper.Display(element.Openfda.GenericName).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (BlazorListStringHelper.Display(element.Openfda.ManufacturerName).Contains(searchString, StringComparison.OrdinalIgnoreCase)) 
            return true;
        if (BlazorListStringHelper.Display(element.Openfda.ProductType).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (BlazorListStringHelper.Display(element.Openfda.Route).Contains(searchString, StringComparison.OrdinalIgnoreCase)) 
            return true;
        if (BlazorListStringHelper.Display(element.Purpose).Contains(searchString, StringComparison.OrdinalIgnoreCase)) 
            return true;
        return false;
    }
    private void ToggleExpansion(FullDrug drug) 
    { 
        drug.IsExpanded = !drug.IsExpanded; 
    } 
    private async Task InvokeAsyncByKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await Task.Yield();
            await LoadDrugs();
        }
    }
    private void CloseAlert()
    {
        isWarningAlertVisible = false;
    }
    // ---------------- END Functions -----------------
}
