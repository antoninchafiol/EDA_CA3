@page "/drug"
@using CA3.Client.Pages


<h3>Drug List</h3>
<MudTextField @bind-Value="textValue" Label="Type expected drugs name" Variant="Variant.Outlined"></MudTextField>
<MudButton OnClick="LoadDrugs" Disabled="@isLoading" Variant="Variant.Outlined" Color="Color.Primary">
    @if (isLoading)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Loading drugs</MudText>
    }
    else
    {
        <MudText>Search drugs</MudText>
    }
</MudButton>

<br>

@if (drugs != null && drugs.Any())
{
    <MudTable Items="@drugs.AsQueryable()" Dense="true" Hover="true" Bordered="true" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">List of Drugs</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Application Number</MudTh>
            <MudTh>Generic Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Application Number">@string.Join("", context.Openfda.ApplicationNumber)</MudTd>
            <MudTd DataLabel="Generic Name">@string.Join("", context.Openfda.GenericName) </MudTd>
        </RowTemplate>
        <ChildRowContent>
            <MudTd ColSpan="3">
                <MudPaper Elevation="1" Class="pa-3">
                    <p>Additional information can go here.</p>
                </MudPaper>
            </MudTd>
        </ChildRowContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>

}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@code {

    private void RowClick(TableRowClickEventArgs<FullDrug> args)
    {
        // args.Item.
        // args.Item.IsExpanded = !args.Item.IsExpanded; Toggles the expansion state of the row
    }

    // ---------------- START Variables ----------------
    // ================ API ============================
    [Inject]
    private DrugService service { get; set; } = default!;
    private List<FullDrug> drugs = new();
    private string? errorMessage;

    // ================ MUDBLAZOR ======================
    private string? textValue;
    private bool isLoading = false;

    // ---------------- END Variables ------------------




    // --------------- START Functions ----------------
    // =============== API ============================

    async Task LoadDrugs()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            drugs = await service.GetDrugsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading drugs: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    // =============== MUDBLAZOR ======================

    // private asyvoid ButtonClick()
    // {
    //     LoadDrugs();
    // }

    // ---------------- END Functions -----------------
}
