@page "/drug"
@using CA3.Client.Pages
@using Microsoft.AspNetCore.Components.QuickGrid


<h3>Drug List</h3>
<button class="btn btn-primary" @onclick="LoadDrugs" disabled="@isLoading">
             @(isLoading ? "Loading..." : "Load Drugs")    
</button>
<br>
<br>
<br>
@if (drugs != null && drugs.Any())
{
    <MudTable T="FullDrug" Items="@drugs.AsQueryable()" Dense="true" Hover="true" Bordered="true" Striped="true" Breakpoint="Breakpoint.Sm"
              @ref="mudTable" RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent">
        <ToolBarContent>
            <MudText Typo="Typo.h6">List of Drugs</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Application Number</MudTh>
            <MudTh>Generic Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Application Number">@string.Join("", context.Openfda.ApplicationNumber)</MudTd>
            <MudTd DataLabel="Generic Name">@string.Join("", context.Openfda.GenericName) </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <MudExpansionPanels Style="flex: 1;">
        <MudExpansionPanel Text="Show inline-clicked event log">
            @foreach (var message in clickedEvents)
            {
                <MudText>@message</MudText>
            }
            @if (clickedEvents.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => clickedEvents.Clear())">Clear events</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@code {

    [Inject]
    private DrugService DrugService { get; set; } = default!;
    private List<FullDrug> drugs = new();
    private bool isLoading = false;
    private string? errorMessage;

    private int selectedRowNumber = -1;
    private MudTable<FullDrug> mudTable;
    private List<string> clickedEvents = new();

    private async Task LoadDrugs()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            drugs = await DrugService.GetDrugsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading drugs: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<FullDrug> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(FullDrug element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
